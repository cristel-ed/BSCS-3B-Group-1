# -*- coding: utf-8 -*-
"""GermEval.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_wdl_k153ybXjYtlHhqLQlnnBKtQo0nq
"""

class EvaluationForm:
    def __init__(self, questions):
        self.questions = questions
        self.ratings = {}

    def add_rating(self, question, rating):
        self.ratings[question] = rating

    def calculate_average_rating(self):
        total_rating = 0
        for question, rating in self.ratings.items():
            total_rating += rating
        return total_rating / len(self.ratings)

    def add_remarks(self, average_rating):
        if average_rating <= 1.5:
            self.remarks = "Outstanding!"
        elif average_rating <= 2.5:
            self.remarks = "Very Good!"
        elif average_rating <= 3.5:
            self.remarks = "Good!"
        elif average_rating <= 4.5:
            self.remarks = "Fair!"
        else:
            self.remarks = "Needs Improvement!"

class Question:
    def __init__(self, text):
        self.text = text

class Professor:
    def __init__(self, name):
        self.name = name
        self.evaluation_form = None

evaluation_forms = []

def create_default_evaluation_form():
    questions = [
        Question("Does the professor clearly explain the course material?"),
        Question("Does the professor provide adequate feedback on assignments?"),
        Question("Does the professor create a positive learning environment?"),
        Question("Does the professor encourage student participation?"),
        Question("Does the professor provide sufficient office hours?")
    ]
    evaluation_form = EvaluationForm(questions)
    return evaluation_form

def create_evaluation_form():
    num_questions = int(input("Enter the number of questions: "))

    questions = []
    i = 1
    while i <= num_questions:
        text = input(f"Enter question {i} text: ")
        question = Question(text)
        questions.append(question)
        i += 1

    evaluation_form = EvaluationForm(questions)
    evaluation_forms.append(evaluation_form)
    return evaluation_form

def answer_evaluation_form(evaluation_form):
    print("1 is Highest and 5 is Lowest")
    for question in evaluation_form.questions:
        print(f"Question : {question.text}")
        rating = int(input("Enter rating for question  [1 - 5] : "))
        evaluation_form.add_rating(question, rating)

def check_performance(evaluation_form, professor):
    average_rating = evaluation_form.calculate_average_rating()
    evaluation_form.add_remarks(average_rating)
    print(f"{professor.name}'s average rating: {average_rating:.2f}")
    print(f"{professor.name}'s remarks: {evaluation_form.remarks}")

def calculate_average_rating(professors):
    total_rating = 0
    count = 0
    for professor in professors:
        if professor.evaluation_form:
            total_rating += professor.evaluation_form.calculate_average_rating()
            count += 1
    average_rating = total_rating / count
    return average_rating

def main():
    professors = [
        Professor("John Smith"),
        Professor("Jane Doe"),
        Professor("Bob Johnson")
    ]

    while True:
        print("Welcome to the Evaluation System!")
        print("1. Create an evaluation form")
        print("2. Answer an evaluation form (or use default form)")
        print("3. Check professor's performance")
        print("4. Quit")
        choice = input("Enter your choice: ")

        if choice == "1":
            evaluation_form = create_evaluation_form()
            print("Evaluation form created!")
        elif choice == "2":
            use_default_form = input("Do you want to use the default evaluation form? (yes/no): ")
            if use_default_form.lower() == "yes":
                default_evaluation_form = create_default_evaluation_form()
                print("Using default evaluation form!")
                print("Choose a professor to evaluate:")
                for i, professor in enumerate(professors):
                    print(f"{i+1}. {professor.name}")
                professor_choice = int(input("Enter the professor's number: "))
                professor = professors[professor_choice-1]
                answer_evaluation_form(default_evaluation_form)
                professor.evaluation_form = default_evaluation_form
                print(f"Evaluation form assigned to {professor.name}!")
            else:
                if not evaluation_forms:
                    print("No evaluation forms available. Please create one first!")
                    continue
                print("Choose an evaluation form:")
                for i, evaluation_form in enumerate(evaluation_forms):
                    print(f"{i+1}. Evaluation Form {i+1}")
                evaluation_form_choice = int(input("Enter the evaluation form number: "))
                evaluation_form = evaluation_forms[evaluation_form_choice-1]
                print("Choose a professor to evaluate:")
                for i, professor in enumerate(professors):
                    print(f"{i+1}. {professor.name}")
                professor_choice = int(input("Enter the professor's number: "))
                professor = professors[professor_choice-1]
                answer_evaluation_form(evaluation_form)
                professor.evaluation_form = evaluation_form
                print(f"Evaluation form assigned to {professor.name}!")
        elif choice == "3":
            professors_not_evaluated = [professor for professor in professors if not professor.evaluation_form]
            professors_evaluated = [professor for professor in professors if professor.evaluation_form]
            if not professors_evaluated:
                print("No professors have been evaluated yet!")
            else:
                average_rating = calculate_average_rating(professors)
                print(f"Average rating: {average_rating:.2f}")
                print("Professors who have been evaluated:")
                for i, professor in enumerate(professors_evaluated, 1):
                    print(f"{i}. {professor.name}")
                    check_performance(professor.evaluation_form, professor)
            if not professors_not_evaluated:
                print("All professors have been evaluated!")
            else:
                print("Professors who have not been evaluated yet:")
                for i, professor in enumerate(professors_not_evaluated, 1):
                    print(f"{i}. {professor.name}")
        elif choice == "4":
            break
        else:
            print("Invalid choice. Please try again!")

if __name__ == "__main__":
    main()